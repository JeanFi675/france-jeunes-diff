---
export interface Props {
  videos: Array<{
    title: string;
    rotation?: number;
    thumbnail?: string;
    videoUrl?: string;
  }>;
}

const { videos } = Astro.props;
---

<div class="videos-grid-container">
  <!-- Première ligne : 3 vidéos -->
  <div class="videos-row videos-row--three-first">
    {videos.slice(0, 3).map((video, index) => (
      <div class="video-tile" data-video={index} style={`transform: rotate(${video.rotation || 0}deg)`}>
        <div class="video-thumbnail">
          {video.thumbnail ? (
            <img src={video.thumbnail} alt={video.title} loading="lazy" />
          ) : (
            <div class="video-placeholder">
              <span class="video-play-button">▶</span>
            </div>
          )}
        </div>
        <h5 class="video-title">{video.title}</h5>
      </div>
    ))}
  </div>
  
  <!-- Deuxième ligne : 2 vidéos centrées -->
  {videos.length > 3 && (
    <div class="videos-row videos-row--two">
      {videos.slice(3, 5).map((video, index) => (
        <div class="video-tile" data-video={index + 3} style={`transform: rotate(${video.rotation || 0}deg)`}>
          <div class="video-thumbnail">
            {video.thumbnail ? (
              <img src={video.thumbnail} alt={video.title} loading="lazy" />
            ) : (
              <div class="video-placeholder">
                <span class="video-play-button">▶</span>
              </div>
            )}
          </div>
          <h5 class="video-title">{video.title}</h5>
        </div>
      ))}
    </div>
  )}
</div>

<style is:global>
  .videos-grid-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .videos-row {
    display: flex;
    gap: 1.5rem;
    flex-wrap: nowrap;
  }
  
  .videos-row--three-first {
    justify-content: space-between;
  }
  
  .videos-row--three-first > .video-tile {
    flex: 1;
    max-width: calc(33.33% - 1rem);
    min-width: 200px;
  }
  
  .videos-row--two {
    justify-content: center;
    gap: 2rem;
  }
  
  .videos-row--two > .video-tile {
    flex: 0 0 auto;
    width: calc(33.33% - 1rem);
    min-width: 200px;
  }
  
  .video-tile {
    background: var(--brutal-black);
    overflow: hidden;
    transition: all 0.3s ease;
    cursor: pointer;
    border: 4px solid var(--brutal-ice);
    box-shadow: 6px 6px 0 var(--brutal-ice);
  }
  
  .video-tile:hover {
    transform: rotate(0deg) scale(1.05) !important;
    box-shadow: 9px 9px 0 var(--brutal-ice);
  }
  
  .video-thumbnail {
    width: 100%;
    height: 120px;
    background: linear-gradient(135deg, var(--brutal-black) 0%, var(--brutal-gray) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
  }
  
  .video-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .video-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .video-play-button {
    font-size: 2.5rem;
    color: var(--brutal-ice);
    opacity: 0.8;
    transition: all 0.3s ease;
  }
  
  .video-tile:hover .video-play-button {
    opacity: 1;
    transform: scale(1.2);
  }
  
  .video-title {
    font-family: 'Inter', sans-serif;
    font-weight: 800;
    font-size: 0.75rem;
    text-transform: uppercase;
    padding: 0.75rem;
    text-align: center;
    background: var(--brutal-white);
    color: var(--brutal-ice);
    margin: 0;
    line-height: 1.2;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .videos-row {
      flex-direction: column;
      gap: 1rem;
    }
    
    .videos-row--two {
      gap: 1rem;
    }
    
    .videos-row--three-first > .video-tile,
    .videos-row--two > .video-tile {
      max-width: none;
      width: 100%;
      transform: rotate(0deg) !important;
    }
  }
</style>